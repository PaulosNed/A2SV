from collections import *

def parallelCourses(n, prerequisites):
    
    graph = defaultdict(list)
    indegree = defaultdict(int)
    ans = [0] * n
    
    for start, end in prerequisites:
        graph[start].append(end)
        indegree[end] += 1
    
    queue = deque([])
    visited = set()
    for node in range(1, n+1):
        if not indegree[node]:
            queue.append(node)
            visited.add(node)
    
    cnt = 0
    while queue:
        
        cnt += 1
        size = len(queue)
        
        for _ in range(size):
            curr = queue.popleft()
            
            for nei in graph[curr]:
                indegree[nei] -= 1
                if not indegree[nei]:
                    queue.append(nei)
                    visited.add(nei)
        
    return cnt if len(visited) == n else -1
